substitutions:
  name: "roomba"
  # BRC pin, uart_bus, polling interval in milliseconds
  init: 'RoombaComponent::instance(19, id(uart_bus), 10000, true);'

uart:
  id: uart_bus
  tx_pin: 23
  rx_pin: 22
  baud_rate: 115200
  # debug:
  #   direction: RX

esphome:
  name: roomba
  friendly_name: roomba

  includes:
   - ESPHomeRoombaComponent.h

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  hardware_uart: UART1
  logs:
    component: ERROR

# Enable startup debug info
debug:

# local web server
web_server:
  version: 2
  include_internal: true
  local: true

# Enable Home Assistant API
api:
  encryption:
    key: "xxx"

ota:
  - platform: esphome
    password: "yyy"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Roomba Fallback Hotspot"
    password: !secret wifi_password

captive_portal:

custom_component:
  - lambda: |-
      auto r = ${init}
      return {r};
    id: my_roomba

binary_sensor:
  - platform: custom
    lambda: |-
        auto r = ${init}
        return {r->vacuumSensor};
    binary_sensors:
      - name: "${name} vacuum state"

sensor:
  - platform: custom
    lambda: |-
        auto r = ${init}
        return {r->voltageSensor, r->currentSensor, r->batteryChargeSensor, r->batteryCapacitySensor, r->batteryPercentSensor, r->batteryTemperatureSensor, r->driveSpeedSensor, r->mainBrushCurrentSensor, r->sideBrushCurrentSensor};
    sensors:
      - name: "${name} voltage"
        unit_of_measurement: "V"
        icon: mdi:sine-wave
        accuracy_decimals: 2
        filters:
        - quantile:
            window_size: 7
            send_every: 4
            send_first_at: 3
            quantile: .9
        - multiply: 0.001
      - name: "${name} current"
        unit_of_measurement: "A"
        icon: mdi:lightning-bolt
        accuracy_decimals: 3
        filters:
        - quantile:
            window_size: 7
            send_every: 4
            send_first_at: 3
            quantile: .9
        - multiply: 0.001
      - name: "${name} charge"
        unit_of_measurement: "Ah"
        icon: mdi:battery-charging
        accuracy_decimals: 2
        filters:
        - quantile:
            window_size: 7
            send_every: 4
            send_first_at: 3
            quantile: .9
        - multiply: 0.001
      - name: "${name} capacity"
        unit_of_measurement: "Ah"
        icon: mdi:battery
        accuracy_decimals: 2
        filters:
        - quantile:
            window_size: 7
            send_every: 4
            send_first_at: 3
            quantile: .9
        - multiply: 0.001
      - name: "${name} battery"
        unit_of_measurement: "%"
        state_class: "measurement"
        device_class: battery
        icon: mdi:battery-outline
        accuracy_decimals: 0
        filters:
        - quantile:
            window_size: 7
            send_every: 4
            send_first_at: 3
            quantile: .9
      - name: "${name} temperature"
        unit_of_measurement: "Â°C"
        icon: mdi:thermometer
        accuracy_decimals: 0
        filters:
        - quantile:
            window_size: 7
            send_every: 4
            send_first_at: 3
            quantile: .9
      - name: "${name} drive speed"
        unit_of_measurement: "mm/s"
        accuracy_decimals: 0
      - name: "${name} main brush current"
        unit_of_measurement: "A"
        icon: mdi:lightning-bolt
        accuracy_decimals: 3
        filters:
        - quantile:
            window_size: 7
            send_every: 4
            send_first_at: 3
            quantile: .9
        - multiply: 0.001
      - name: "${name} side brush current"
        unit_of_measurement: "A"
        icon: mdi:lightning-bolt
        accuracy_decimals: 3
        filters:
        - quantile:
            window_size: 7
            send_every: 4
            send_first_at: 3
            quantile: .9
        - multiply: 0.001
       
text_sensor:
  - platform: custom
    lambda: |-
      auto r = ${init}
      return {r->chargingSensor, r->activitySensor, r->oiModeSensor};
    text_sensors:
      - name: "${name} charging state"
      - name: "${name} activity"
      - name: "${name} OI mode"

  - platform: wifi_info
    ip_address:
      name: IP Address

switch:
  - platform: safe_mode
    name: "Vacuum Restart (Safe Mode)"

button:
  - platform: shutdown
    name: shutdown

  - platform: restart
    name: "reboot"
